import hashlib
from collections import Counter, deque
import statistics
import platform
from datetime import datetime
import base64
import urllib.parse
import requests
import random
import string
import math
import json
import os
import time
from colorama import Fore, Style, init
init(autoreset=True)

NV = {
    1: '‚öîÔ∏è B·∫≠c th·∫ßy t·∫•n c√¥ng',
    2: 'üëä Quy·ªÅn s·∫Øt',
    3: 'ü§ø Th·ª£ l·∫∑n s√¢u',
    4: '‚öΩ C∆°n l·ªëc s√¢n c·ªè',
    5: 'üèá Hi·ªáp sƒ© phi nhanh',
    6: '‚öæ Vua home run'
}

class SmartAI:
    """
    üß† H·ªÜ TH·ªêNG AI N√ÇNG C·∫§P v11.0 üß†
    50 logic ph√¢n t√≠ch n√¢ng cao, l·ª±a ch·ªçn duy nh·∫•t theo user & m√£ k√¨.
    """
    
    def __init__(self):
        self.total_logics = 50
        self.current_logic_index = -1
        self.selection_history = deque(maxlen=10)
        self.result_history = deque(maxlen=30)
        
        # --- 50 LOGIC N√ÇNG C·∫§P HO√ÄN TO√ÄN M·ªöI ---
        self.logics = [
            # --- Nh√≥m 1: Ph√¢n t√≠ch th·ªëng k√™ & x√°c su·∫•t (10 logic) ---
            self.logic_1_z_score_outlier, self.logic_2_poisson_distribution, self.logic_3_markov_chain_avoidance,
            self.logic_4_bayesian_inference_update, self.logic_5_standard_deviation_instability, self.logic_6_entropy_minimization,
            self.logic_7_chi_squared_test, self.logic_8_benford_law_deviation, self.logic_9_pareto_principle_focus,
            self.logic_10_monte_carlo_simulation,

            # --- Nh√≥m 2: Ph√¢n t√≠ch chu·ªói & m·∫´u h√¨nh ph·ª©c t·∫°p (10 logic) ---
            self.logic_11_run_length_entropy, self.logic_12_fibonacci_sequence_skip, self.logic_13_prime_number_positioning,
            self.logic_14_adjacent_pair_avoidance, self.logic_15_reflection_pattern_break, self.logic_16_cycle_detection_floyd,
            self.logic_17_inter_win_interval_analysis, self.logic_18_duality_break_odd_even, self.logic_19_triad_inversion,
            self.logic_20_lexicographical_ordering_anomaly,

            # --- Nh√≥m 3: L√Ω thuy·∫øt tr√≤ ch∆°i & Meta-Gaming (10 logic) ---
            self.logic_21_grimsby_gambit, self.logic_22_nash_equilibrium_assumption, self.logic_23_minimax_regret,
            self.logic_24_level_k_thinking, self.logic_25_exploit_the_overdog, self.logic_26_contrarian_consensus,
            self.logic_27_chaos_theory_edge, self.logic_28_information_asymmetry_exploit, self.logic_29_signaling_game_imitation,
            self.logic_30_anti_herding_maneuver,

            # --- Nh√≥m 4: Logic th√≠ch ·ª©ng & d·ª±a tr√™n tr·∫°ng th√°i (10 logic) ---
            self.logic_31_volatility_adaptive_choice, self.logic_32_win_loss_momentum_shift, self.logic_33_state_change_detector,
            self.logic_34_kalman_filter_prediction, self.logic_35_feedback_loop_correction, self.logic_36_logic_performance_meta_analysis,
            self.logic_37_self_similarity_avoidance, self.logic_38_recency_frequency_score, self.logic_39_game_phase_detection,
            self.logic_40_systematic_desensitization,

            # --- Nh√≥m 5: Logic s√°ng t·∫°o & Heuristics (10 logic) ---
            self.logic_41_quantum_superposition_collapse, self.logic_42_swarm_intelligence_divergence, self.logic_43_knight_tour_heuristic,
            self.logic_44_golden_ratio_bias, self.logic_45_fractal_dimension_break, self.logic_46_information_gap_fill,
            self.logic_47_weighted_recency_drought, self.logic_48_relative_strength_index, self.logic_49_perfect_information_fallacy,
            self.logic_50_occam_razor_choice
        ]
        self.logic_performance = {i: {'wins': 0, 'total': 0, 'win_rate': 0.0} for i in range(self.total_logics)}

    def select_logic_deterministically(self, user_id, ma_ki):
        input_string = f"{user_id}-{ma_ki}"
        hash_object = hashlib.sha256(input_string.encode())
        hex_dig = hash_object.hexdigest()
        big_integer = int(hex_dig, 16)
        logic_index = big_integer % self.total_logics
        self.current_logic_index = logic_index
        return self.logics[logic_index]

    def add_result(self, selected, actual_winner):
        is_win = (selected != actual_winner)
        self.result_history.append({'selected': selected, 'winner': actual_winner, 'is_win': is_win, 'logic_used': self.current_logic_index})
        perf = self.logic_performance[self.current_logic_index]
        perf['total'] += 1
        if is_win:
            perf['wins'] += 1
        perf['win_rate'] = perf['wins'] / perf['total'] if perf['total'] > 0 else 0.0

    def check_anti_patterns(self, top10, top100):
        if len(self.selection_history) >= 3 and len(set(list(self.selection_history)[-3:])) == 1:
            char = list(self.selection_history)[-1]
            alternatives = self.get_safe_alternatives(top100, [char])
            return random.choice(alternatives), f"üõ°Ô∏è ANTI-PATTERN (AI l·∫∑p l·∫°i {char})"
        if len(top10[1]) >= 3 and len(set(top10[1][:3])) == 1:
            char = top10[1][0]
            alternatives = self.get_safe_alternatives(top100, [char])
            return random.choice(alternatives), f"üõ°Ô∏è ANTI-PATTERN (Game l·∫∑p l·∫°i {char})"
        return None, None

    def get_safe_alternatives(self, top100_data, avoid_list):
        try:
            win_counts = sorted([(i + 1, wins) for i, wins in enumerate(top100_data[1])], key=lambda x: x[1])
            safe_chars = [char for char, wins in win_counts if char not in avoid_list]
            return safe_chars if safe_chars else [i for i in range(1, 7) if i not in avoid_list]
        except:
            return [i for i in range(1, 7) if i not in avoid_list]

    def get_win_counts_100(self, top100): return {i + 1: wins for i, wins in enumerate(top100[1])}
    
    # --- NH√ìM 1: TH·ªêNG K√ä & X√ÅC SU·∫§T ---
    def logic_1_z_score_outlier(self, top10, top100):
        """1. Tr√°nh Ngo·∫°i l·ªá Z-Score: Tr√°nh NV c√≥ t·∫ßn su·∫•t th·∫Øng b·∫•t th∆∞·ªùng nh·∫•t (cao ho·∫∑c th·∫•p) trong 100 v√°n."""
        wins = top100[1]
        mean = statistics.mean(wins)
        stdev = statistics.stdev(wins) if len(wins) > 1 else 1
        if stdev == 0: return random.randint(1, 6)
        z_scores = {i+1: abs((wins[i] - mean) / stdev) for i in range(6)}
        avoid = max(z_scores, key=z_scores.get)
        return self.get_safe_alternatives(top100, [avoid])[0]

    def logic_2_poisson_distribution(self, top10, top100):
        """2. Ph√¢n ph·ªëi Poisson: Ch·ªçn NV c√≥ s·ªë l·∫ßn th·∫Øng 'qu√° h·∫°n' nh·∫•t so v·ªõi t·ª∑ l·ªá trung b√¨nh."""
        lambda_val = sum(top100[1]) / 100.0  # T·ª∑ l·ªá th·∫Øng trung b√¨nh m·ªói v√°n cho b·∫•t k·ª≥ NV n√†o
        droughts = self._get_droughts(top10[1] + list(self.result_history)[::-1])
        expected_drought = -math.log(1 - (1/6)) / lambda_val if lambda_val > 0 else 99
        deviations = {char: abs(drought - expected_drought) for char, drought in droughts.items()}
        return max(deviations, key=deviations.get)

    def logic_3_markov_chain_avoidance(self, top10, top100):
        """3. Chu·ªói Markov: D·ª±a tr√™n v√°n th·∫Øng cu·ªëi, tr√°nh NV c√≥ x√°c su·∫•t chuy·ªÉn ti·∫øp cao nh·∫•t."""
        last_winner = top10[1][0]
        transitions = Counter()
        history = [r['winner'] for r in self.result_history] + top10[1]
        for i in range(len(history) - 1):
            if history[i+1] == last_winner:
                transitions[history[i]] += 1
        if not transitions: return self.get_safe_alternatives(top100, [last_winner])[0]
        avoid = transitions.most_common(1)[0][0]
        return self.get_safe_alternatives(top100, [avoid])[0]

    def logic_4_bayesian_inference_update(self, top10, top100):
        """4. Suy lu·∫≠n Bayes: C·∫≠p nh·∫≠t 'ni·ªÅm tin' v·ªÅ NV y·∫øu nh·∫•t d·ª±a tr√™n 10 v√°n g·∫ßn nh·∫•t."""
        prior = {char: 1/6 for char in range(1, 7)}
        likelihood = {char: (1 - (top10[1].count(char) / 10)) for char in range(1, 7)}
        posterior = {char: prior[char] * likelihood[char] for char in range(1, 7)}
        return max(posterior, key=posterior.get)

    def logic_5_standard_deviation_instability(self, top10, top100):
        """5. B·∫•t ·ªïn ƒë·ªô l·ªách chu·∫©n: Ch·ªçn NV c√≥ l·ªãch s·ª≠ th·∫Øng ·ªïn ƒë·ªãnh v√† √≠t bi·∫øn ƒë·ªông nh·∫•t."""
        win_indices = {char: [i for i, w in enumerate(reversed(top10[1])) if w == char] for char in range(1, 7)}
        stdevs = {}
        for char, indices in win_indices.items():
            if len(indices) < 2:
                stdevs[char] = 99 # Ph·∫°t nh·ªØng con √≠t th·∫Øng
            else:
                intervals = [indices[i+1] - indices[i] for i in range(len(indices)-1)]
                stdevs[char] = statistics.stdev(intervals) if len(intervals) > 1 else 0
        return min(stdevs, key=stdevs.get)

    def logic_6_entropy_minimization(self, top10, top100):
        """6. Gi·∫£m thi·ªÉu Entropy: Ch·ªçn NV √≠t ƒë∆∞·ª£c mong ƒë·ª£i nh·∫•t ƒë·ªÉ ph√° v·ª° t√≠nh tr·∫≠t t·ª± c·ªßa h·ªá th·ªëng."""
        freq = Counter(top10[1])
        total = len(top10[1])
        probabilities = {i+1: freq.get(i+1, 0) / total for i in range(6)}
        return min(probabilities, key=probabilities.get)

    def logic_7_chi_squared_test(self, top10, top100):
        """7. Ki·ªÉm ƒë·ªãnh Chi-squared: T√¨m NV c√≥ t·∫ßn su·∫•t th·∫Øng sai l·ªách nh·∫•t so v·ªõi k·ª≥ v·ªçng."""
        observed = top100[1]
        expected_val = sum(observed) / 6
        if expected_val == 0: return random.randint(1, 6)
        chi_values = {i+1: ((observed[i] - expected_val)**2) / expected_val for i in range(6)}
        # Tr√°nh con sai l·ªách nh·∫•t, c√≥ th·ªÉ l√† qu√° m·∫°nh ho·∫∑c qu√° y·∫øu
        avoid = max(chi_values, key=chi_values.get)
        return self.get_safe_alternatives(top100, [avoid])[0]

    def logic_8_benford_law_deviation(self, top10, top100):
        """8. L·ªách lu·∫≠t Benford: Tr√°nh NV c√≥ s·ªë l·∫ßn th·∫Øng c√≥ ch·ªØ s·ªë ƒë·∫ßu sai l·ªách nh·∫•t so v·ªõi lu·∫≠t Benford."""
        first_digits = Counter([int(str(w)[0]) for w in top100[1] if w > 0])
        benford_probs = {1: 0.301, 2: 0.176, 3: 0.125, 4: 0.097, 5: 0.079, 6: 0.067}
        deviations = {}
        for i in range(1, 7):
            observed_freq = first_digits.get(i, 0) / sum(first_digits.values()) if sum(first_digits.values()) > 0 else 0
            deviations[i] = abs(observed_freq - benford_probs[i])
        avoid = max(deviations, key=deviations.get)
        return self.get_safe_alternatives(top100, [avoid])[0]

    def logic_9_pareto_principle_focus(self, top10, top100):
        """9. Nguy√™n l√Ω Pareto (80/20): Gi·∫£ ƒë·ªãnh 20% NV (1-2 NV) g√¢y ra 80% chi·∫øn th·∫Øng, v√† tr√°nh ch√∫ng."""
        sorted_wins = sorted(self.get_win_counts_100(top100).items(), key=lambda x: x[1], reverse=True)
        avoid = [sorted_wins[0][0]]
        if len(sorted_wins) > 1: avoid.append(sorted_wins[1][0])
        return self.get_safe_alternatives(top100, avoid)[0]

    def logic_10_monte_carlo_simulation(self, top10, top100):
        """10. M√¥ ph·ªèng Monte Carlo: Ch·∫°y m√¥ ph·ªèng ng·∫´u nhi√™n d·ª±a tr√™n t·∫ßn su·∫•t 100 v√°n ƒë·ªÉ t√¨m NV √≠t c√≥ kh·∫£ nƒÉng th·∫Øng nh·∫•t."""
        weights = top100[1]
        if sum(weights) == 0: return random.randint(1, 6)
        simulations = 1000
        results = random.choices(range(1, 7), weights=weights, k=simulations)
        counts = Counter(results)
        return min(counts, key=counts.get)

    # --- NH√ìM 2: CHU·ªñI & M·∫™U H√åNH PH·ª®C T·∫†P ---
    def _get_droughts(self, history):
        droughts = {char: len(history) for char in range(1, 7)}
        for i, winner in enumerate(history):
            if winner in droughts and droughts[winner] == len(history):
                droughts[winner] = i
        return droughts

    def logic_11_run_length_entropy(self, top10, top100):
        """11. Entropy ƒë·ªô d√†i chu·ªói: Ch·ªçn NV ph√° v·ª° chu·ªói l·∫∑p l·∫°i (run) nh√†m ch√°n nh·∫•t."""
        runs = []
        if not top10[1]: return random.randint(1, 6)
        current_run = 1
        for i in range(1, len(top10[1])):
            if top10[1][i] == top10[1][i-1]:
                current_run += 1
            else:
                runs.append(current_run)
                current_run = 1
        runs.append(current_run)
        if statistics.mean(runs) < 1.5: # N·∫øu h·ªá th·ªëng ƒëang h·ªón lo·∫°n
            return top10[1][0] # ƒêi theo xu h∆∞·ªõng
        else: # N·∫øu h·ªá th·ªëng ƒëang c√≥ chu·ªói
            return self.get_safe_alternatives(top100, [top10[1][0]])[0] # Ph√° v·ª° chu·ªói

    def logic_12_fibonacci_sequence_skip(self, top10, top100):
        """12. B·ªè qua chu·ªói Fibonacci: N·∫øu v·ªã tr√≠ c√°c l·∫ßn th·∫Øng c·ªßa NV t·∫°o th√†nh chu·ªói Fibonacci, tr√°nh n√≥."""
        fib = [1, 2, 3, 5, 8, 13]
        for char in range(1, 7):
            indices = [i for i, w in enumerate(top10[1]) if w == char]
            if len(indices) >= 3 and all(idx in fib for idx in indices):
                return self.get_safe_alternatives(top100, [char])[0]
        return self._get_droughts(top10[1])[max(self._get_droughts(top10[1]), key=self._get_droughts(top10[1]).get)]

    def logic_13_prime_number_positioning(self, top10, top100):
        """13. V·ªã tr√≠ s·ªë nguy√™n t·ªë: Tr√°nh NV c√≥ xu h∆∞·ªõng th·∫Øng ·ªü c√°c v·ªã tr√≠ nguy√™n t·ªë (2, 3, 5, 7)."""
        primes = {2, 3, 5, 7}
        prime_winners = [top10[1][i-1] for i in primes if i <= len(top10[1])]
        if not prime_winners: return random.randint(1, 6)
        counts = Counter(prime_winners)
        avoid = counts.most_common(1)[0][0]
        return self.get_safe_alternatives(top100, [avoid])[0]

    def logic_14_adjacent_pair_avoidance(self, top10, top100):
        """14. Tr√°nh c·∫∑p li·ªÅn k·ªÅ: Tr√°nh NV (N) n·∫øu v√°n tr∆∞·ªõc l√† (N-1) ho·∫∑c (N+1)."""
        last_winner = top10[1][0]
        avoid = [(last_winner % 6) + 1, (last_winner - 2 + 6) % 6 + 1]
        return self.get_safe_alternatives(top100, avoid)[0]

    def logic_15_reflection_pattern_break(self, top10, top100):
        """15. Ph√° v·ª° m·∫´u ph·∫£n chi·∫øu: N·∫øu chu·ªói c√≥ d·∫°ng ABC...CBA, tr√°nh con ti·∫øp theo trong m·∫´u."""
        history = top10[1]
        if len(history) >= 5 and history[:2] == list(reversed(history[2:4])):
             # A-B-C-B-A pattern
             return self.get_safe_alternatives(top100, [history[0]])[0]
        return self.logic_1_z_score_outlier(top10, top100) # fallback

    def logic_16_cycle_detection_floyd(self, top10, top100):
        """16. Ph√°t hi·ªán chu k·ª≥ Floyd: T√¨m chu k·ª≥ trong l·ªãch s·ª≠ k·∫øt qu·∫£ v√† tr√°nh con ti·∫øp theo."""
        history = [r['winner'] for r in self.result_history]
        if len(history) < 5: return random.randint(1, 6)
        tortoise = len(history) - 2
        hare = len(history) - 1
        while history[tortoise] != history[hare]:
            tortoise -= 1
            if tortoise < 0 or hare < 1: return random.randint(1,6)
        
        mu = 0
        tortoise = 0
        while history[tortoise] != history[hare]:
            tortoise += 1
            hare += 1
            mu += 1

        lam = 1
        hare = tortoise + 1
        while history[tortoise] != history[hare]:
            hare += 1
            lam += 1
        
        next_in_cycle_index = mu + (len(history) - mu) % lam
        avoid = history[next_in_cycle_index]
        return self.get_safe_alternatives(top100, [avoid])[0]

    def logic_17_inter_win_interval_analysis(self, top10, top100):
        """17. Ph√¢n t√≠ch kho·∫£ng c√°ch th·∫Øng: Ch·ªçn NV c√≥ kho·∫£ng c√°ch gi·ªØa c√°c l·∫ßn th·∫Øng g·∫ßn ƒë√¢y nh·∫•t b·∫•t th∆∞·ªùng."""
        intervals = {}
        for char in range(1, 7):
            indices = [i for i, w in enumerate(top10[1]) if w == char]
            if len(indices) > 1:
                intervals[char] = indices[0] - indices[1] 
            else:
                intervals[char] = 99 # Ph·∫°t
        return max(intervals, key=intervals.get)

    def logic_18_duality_break_odd_even(self, top10, top100):
        """18. Ph√° v·ª° l∆∞·ª°ng c·ª±c Ch·∫µn/L·∫ª: N·∫øu c√≥ chu·ªói ch·∫µn ho·∫∑c l·∫ª, ch·ªçn m·ªôt NV t·ª´ nh√≥m ƒë·ªëi di·ªán."""
        parity_history = [w % 2 for w in top10[1][:5]]
        if len(set(parity_history)) == 1: # Chu·ªói ƒë·ªìng nh·∫•t
            target_parity = 1 - parity_history[0]
            candidates = [c for c in range(1, 7) if c % 2 == target_parity]
            return random.choice(candidates)
        return self.logic_1_z_score_outlier(top10, top100)

    def logic_19_triad_inversion(self, top10, top100):
        """19. ƒê·∫£o ng∆∞·ª£c b·ªô ba: N·∫øu m·∫´u l√† A->B->C, tr√°nh con D sao cho (A,B,C,D) t·∫°o th√†nh m·ªôt nh√≥m logic."""
        if len(top10[1]) < 3: return random.randint(1,6)
        a, b, c = top10[1][2], top10[1][1], top10[1][0]
        if a < b < c: # Chu·ªói tƒÉng
            candidates = [i for i in range(1,7) if i < c]
            return self.get_safe_alternatives(top100, candidates)[0]
        if a > b > c: # Chu·ªói gi·∫£m
            candidates = [i for i in range(1,7) if i > c]
            return self.get_safe_alternatives(top100, candidates)[0]
        return self.logic_1_z_score_outlier(top10, top100)

    def logic_20_lexicographical_ordering_anomaly(self, top10, top100):
        """20. D·ªã th∆∞·ªùng th·ª© t·ª± t·ª´ ƒëi·ªÉn: Ch·ªçn NV √≠t xu·∫•t hi·ªán nh·∫•t trong c√°c c·∫∑p c√≥ th·ª© t·ª±."""
        counts = Counter()
        history = top10[1]
        for i in range(len(history) - 1):
            pair = tuple(sorted((history[i], history[i+1])))
            counts[pair] += 1
        least_common_pair = counts.most_common()[-1][0]
        return random.choice(least_common_pair)

    # --- NH√ìM 3: L√ù THUY·∫æT TR√í CH∆†I & META ---
    def logic_21_grimsby_gambit(self, top10, top100):
        """21. Gambit Grimsby: Ch·ªçn NV y·∫øu nh·∫•t, nh∆∞ng ch·ªâ khi n√≥ kh√¥ng ph·∫£i l√† NV y·∫øu nh·∫•t r√µ r√†ng."""
        sorted_chars = self.get_safe_alternatives(top100, [])
        if len(sorted_chars) > 1:
            return sorted_chars[1] # Ch·ªçn con y·∫øu th·ª© hai
        return sorted_chars[0]

    def logic_22_nash_equilibrium_assumption(self, top10, top100):
        """22. Gi·∫£ ƒë·ªãnh c√¢n b·∫±ng Nash: Gi·∫£ s·ª≠ c√°c 'ng∆∞·ªùi ch∆°i' kh√°c ƒëang t·ªëi ∆∞u h√≥a, h√£y ch·ªçn con √≠t ƒë∆∞·ª£c ch·ªçn nh·∫•t."""
        return self.logic_1_z_score_outlier(top10, top100) # Trong m·ªôt game ng·∫´u nhi√™n, ƒë√¢y l√† l·ª±a ch·ªçn h·ª£p l√Ω nh·∫•t

    def logic_23_minimax_regret(self, top10, top100):
        """23. Ti·∫øc nu·ªëi t·ªëi thi·ªÉu: Ch·ªçn NV m√† n·∫øu n√≥ th·∫Øng, s·ª± 'ti·∫øc nu·ªëi' (d·ª±a tr√™n t·∫ßn su·∫•t) l√† th·∫•p nh·∫•t."""
        wins = self.get_win_counts_100(top100)
        max_wins = max(wins.values())
        regret = {char: max_wins - win_count for char, win_count in wins.items()}
        return min(regret, key=regret.get)

    def logic_24_level_k_thinking(self, top10, top100):
        """24. T∆∞ duy c·∫•p K (K=2): 'T√¥i nghƒ© r·∫±ng b·∫°n nghƒ© r·∫±ng t√¥i s·∫Ω ch·ªçn X, v√¨ v·∫≠y t√¥i s·∫Ω ch·ªçn Y'."""
        # K=0: Ch·ªçn ng·∫´u nhi√™n
        # K=1: Ng∆∞·ªùi ch∆°i s·∫Ω nghƒ© AI ch·ªçn con y·∫øu nh·∫•t (logic 1). 
        level1_choice = sorted(self.get_win_counts_100(top100).items(), key=lambda x:x[1])[0][0]
        # K=2: AI d·ª± ƒëo√°n ng∆∞·ªùi ch∆°i s·∫Ω c∆∞·ª£c v√†o con K=1, n√™n AI s·∫Ω tr√°nh n√≥.
        return self.get_safe_alternatives(top100, [level1_choice])[0]

    def logic_25_exploit_the_overdog(self, top10, top100):
        """25. Khai th√°c k·∫ª m·∫°nh: Lu√¥n ƒë·∫∑t c∆∞·ª£c ch·ªëng l·∫°i NV m·∫°nh nh·∫•t trong 100 v√°n."""
        counts = self.get_win_counts_100(top100)
        strongest = max(counts, key=counts.get)
        return self.get_safe_alternatives(top100, [strongest])[0]

    def logic_26_contrarian_consensus(self, top10, top100):
        """26. Ng∆∞·ª£c s·ªë ƒë√¥ng: Ch·∫°y 3 logic ƒë∆°n gi·∫£n v√† ch·ªçn con kh√¥ng ƒë∆∞·ª£c ch√∫ng ch·ªçn."""
        c1 = sorted(self.get_win_counts_100(top100).items(), key=lambda x:x[1])[0][0] # Y·∫øu nh·∫•t 100
        c2 = sorted(Counter(top10[1]).items(), key=lambda x:x[1])[0][0] # Y·∫øu nh·∫•t 10
        c3 = self._get_droughts(top10[1])[max(self._get_droughts(top10[1]), key=self._get_droughts(top10[1]).get)] # Tr·ªÖ nh·∫•t
        consensus = {c1, c2, c3}
        return self.get_safe_alternatives(top100, list(consensus))[0]

    def logic_27_chaos_theory_edge(self, top10, top100):
        """27. L·ª£i th·∫ø H·ªón lo·∫°n: N·∫øu 10 v√°n g·∫ßn ƒë√¢y c√≥ ƒë·ªô ph√¢n t√°n cao (nhi·ªÅu ng∆∞·ªùi th·∫Øng kh√°c nhau), h√£y ƒëi theo xu h∆∞·ªõng g·∫ßn nh·∫•t."""
        unique_winners_10 = len(set(top10[1]))
        if unique_winners_10 >= 5: # H·ªón lo·∫°n
            return top10[1][0] # B·∫Øt ch∆∞·ªõc ng∆∞·ªùi th·∫Øng cu·ªëi
        else: # Tr·∫≠t t·ª±
            return self.get_safe_alternatives(top100, [top10[1][0]])[0] # Ph√° v·ª°

    def logic_28_information_asymmetry_exploit(self, top10, top100):
        """28. Khai th√°c th√¥ng tin b·∫•t ƒë·ªëi x·ª©ng: AI bi·∫øt l·ªãch s·ª≠ c∆∞·ª£c c·ªßa m√¨nh, ng∆∞·ªùi ch∆°i th√¨ kh√¥ng. Tr√°nh l·∫∑p l·∫°i l·ª±a ch·ªçn thua."""
        recent_losses = [r['selected'] for r in self.result_history if not r['is_win']][-3:]
        if recent_losses:
            return self.get_safe_alternatives(top100, recent_losses)[0]
        return self.logic_1_z_score_outlier(top10, top100)

    def logic_29_signaling_game_imitation(self, top10, top100):
        """29. B·∫Øt ch∆∞·ªõc tr√≤ ch∆°i t√≠n hi·ªáu: N·∫øu 2 v√°n cu·ªëi l√† (X, Y), t√¨m l·∫ßn cu·ªëi (X, Y) xu·∫•t hi·ªán v√† tr√°nh con theo sau n√≥."""
        if len(top10[1]) < 2: return random.randint(1, 6)
        p1, p2 = top10[1][1], top10[1][0]
        history = [r['winner'] for r in self.result_history]
        for i in range(len(history) - 2):
            if history[i] == p1 and history[i+1] == p2:
                return self.get_safe_alternatives(top100, [history[i+2]])[0]
        return self.get_safe_alternatives(top100, [p2])[0]

    def logic_30_anti_herding_maneuver(self, top10, top100):
        """30. Ch·ªëng hi·ªáu ·ª©ng b·∫ßy ƒë√†n: Tr√°nh 3 NV th·∫Øng nhi·ªÅu nh·∫•t trong 10 v√°n g·∫ßn nh·∫•t."""
        counts10 = Counter(top10[1])
        avoid = [c[0] for c in counts10.most_common(3)]
        return self.get_safe_alternatives(top100, avoid)[0]

    # --- NH√ìM 4: TH√çCH ·ª®NG & D·ª∞A TR√äN TR·∫†NG TH√ÅI ---
    def logic_31_volatility_adaptive_choice(self, top10, top100):
        """31. Th√≠ch ·ª©ng bi·∫øn ƒë·ªông: N·∫øu h·ªá th·ªëng bi·∫øn ƒë·ªông (th·∫Øng thua th·∫•t th∆∞·ªùng), ch·ªçn an to√†n. N·∫øu ·ªïn ƒë·ªãnh, ch·ªçn r·ªßi ro."""
        win_rates = [p['win_rate'] for p in self.logic_performance.values() if p['total'] > 0]
        if not win_rates or statistics.stdev(win_rates) > 0.3: # Bi·∫øn ƒë·ªông
            return sorted(self.get_win_counts_100(top100).items(), key=lambda x:x[1])[0][0]
        else: # ·ªîn ƒë·ªãnh
            return sorted(self.get_win_counts_100(top100).items(), key=lambda x:x[1], reverse=True)[0][0]

    def logic_32_win_loss_momentum_shift(self, top10, top100):
        """32. Chuy·ªÉn ƒë·ªïi ƒë·ªông l∆∞·ª£ng: N·∫øu AI ƒëang th·∫Øng, ti·∫øp t·ª•c logic c≈©. N·∫øu thua, chuy·ªÉn sang logic ƒë·ªëi ngh·ªãch."""
        if not self.result_history: return self.logic_1_z_score_outlier(top10, top100)
        last_result = self.result_history[-1]
        if last_result['is_win']:
            return self.logics[last_result['logic_used']](top10, top100)
        else: # Thua, l√†m ng∆∞·ª£c l·∫°i
            last_choice = self.logics[last_result['logic_used']](top10, top100)
            return self.get_safe_alternatives(top100, [last_choice])[0]

    def logic_33_state_change_detector(self, top10, top100):
        """33. D√≤ tr·∫°ng th√°i: So s√°nh ph√¢n ph·ªëi 10 v√°n g·∫ßn nh·∫•t v·ªõi 10 v√°n tr∆∞·ªõc ƒë√≥. N·∫øu kh√°c bi·ªát l·ªõn, h·ªá th·ªëng ƒë√£ thay ƒë·ªïi."""
        if len(top10[1]) < 20:
             history = [r['winner'] for r in self.result_history]
        else:
             history = top10[1]

        if len(history) < 20: return random.randint(1,6)
        
        dist1 = Counter(history[:10])
        dist2 = Counter(history[10:20])
        diff = sum(abs(dist1.get(i,0) - dist2.get(i,0)) for i in range(1,7))
        if diff > 6: # Thay ƒë·ªïi l·ªõn
            return self.logic_10_monte_carlo_simulation(top10,top100) # Reset, tin v√†o d√†i h·∫°n
        else: # ·ªîn ƒë·ªãnh
            return self.logic_27_chaos_theory_edge(top10,top100) # Tin v√†o ng·∫Øn h·∫°n

    def logic_34_kalman_filter_prediction(self, top10, top100):
        """34. D·ª± ƒëo√°n Kalman: Coi t·∫ßn su·∫•t th·∫Øng l√† m·ªôt t√≠n hi·ªáu nhi·ªÖu v√† l·ªçc ƒë·ªÉ t√¨m ra 't·∫ßn su·∫•t th·∫≠t'."""
        # Simplified Kalman-like logic
        estimate = dict(self.get_win_counts_100(top100))
        for winner in top10[1]:
            for char in range(1, 7):
                if char == winner:
                    estimate[char] = estimate[char] * 0.9 + (1) * 0.1 # C·∫≠p nh·∫≠t
                else:
                    estimate[char] = estimate[char] * 0.9 # Gi·∫£m d·∫ßn
        return min(estimate, key=estimate.get)

    def logic_35_feedback_loop_correction(self, top10, top100):
        """35. S·ª≠a l·ªói v√≤ng l·∫∑p: N·∫øu logic ƒë∆∞·ª£c ch·ªçn g·∫ßn ƒë√¢y c√≥ t·ª∑ l·ªá th·∫Øng th·∫•p, h√£y tr√°nh n√≥ v√† c√°c logic t∆∞∆°ng t·ª±."""
        last_5_logics = [r['logic_used'] for r in self.result_history][-5:]
        bad_logics = [l for l in last_5_logics if self.logic_performance[l]['win_rate'] < 0.4 and self.logic_performance[l]['total'] > 5]
        if not bad_logics: return self.logic_1_z_score_outlier(top10, top100)
        
        bad_group = bad_logics[0] // 10
        # Chuy·ªÉn sang nh√≥m logic kh√°c
        next_group = (bad_group + 1) % 5
        logic_idx = next_group * 10 + random.randint(0, 9)
        return self.logics[logic_idx](top10, top100)

    def logic_36_logic_performance_meta_analysis(self, top10, top100):
        """36. Ph√¢n t√≠ch meta logic: Ch·ªçn logic c√≥ hi·ªáu su·∫•t t·ªët nh·∫•t trong 30 v√°n v·ª´a qua."""
        best_perf = -1
        best_logic = 0
        for i in range(self.total_logics):
            perf = self.logic_performance[i]
            if perf['total'] > 5 and perf['win_rate'] > best_perf:
                best_perf = perf['win_rate']
                best_logic = i
        return self.logics[best_logic](top10, top100)
    
    def logic_37_self_similarity_avoidance(self, top10, top100):
        """37. Tr√°nh T·ª± ƒë·ªìng d·∫°ng: AI s·∫Ω tr√°nh l·∫∑p l·∫°i m·ªôt l·ª±a ch·ªçn trong N v√°n g·∫ßn nh·∫•t, b·∫•t k·ªÉ th·∫Øng thua."""
        avoid = list(self.selection_history)
        if not avoid: return random.randint(1,6)
        return self.get_safe_alternatives(top100, avoid)[0]

    def logic_38_recency_frequency_score(self, top10, top100):
        """38. ƒêi·ªÉm RF (Recency-Frequency): Ch·ªçn NV c√≥ ƒëi·ªÉm RF th·∫•p nh·∫•t (th·∫Øng ƒë√£ l√¢u v√† t·∫ßn su·∫•t th·∫•p)."""
        droughts = self._get_droughts(top10[1])
        freqs = self.get_win_counts_100(top100)
        # Normalize
        max_drought = max(droughts.values()) if droughts else 1
        max_freq = max(freqs.values()) if freqs else 1
        scores = {c: (droughts.get(c, max_drought) / max_drought) - (freqs.get(c, 0) / max_freq) for c in range(1, 7)}
        return max(scores, key=scores.get) # ƒêi·ªÉm cao nh·∫•t l√† t·ªët nh·∫•t (tr·ªÖ cao, t·∫ßn su·∫•t th·∫•p)

    def logic_39_game_phase_detection(self, top10, top100):
        """39. Nh·∫≠n di·ªán giai ƒëo·∫°n game: 'ƒê·∫ßu game' (d∆∞·ªõi 20 v√°n) th√¨ an to√†n, 'gi·ªØa game' th√¨ t·∫•n c√¥ng."""
        if len(self.result_history) < 20: # ƒê·∫ßu game
            return sorted(self.get_win_counts_100(top100).items(), key=lambda x:x[1])[0][0]
        else: # Gi·ªØa game
            return self._get_droughts(top10[1])[max(self._get_droughts(top10[1]), key=self._get_droughts(top10[1]).get)]

    def logic_40_systematic_desensitization(self, top10, top100):
        """40. Gi·∫£i m·∫´n c·∫£m c√≥ h·ªá th·ªëng: Ch·ªçn ng·∫´u nhi√™n t·ª´ 3 NV y·∫øu nh·∫•t ƒë·ªÉ l√†m AI kh√≥ b·ªã d·ª± ƒëo√°n h∆°n."""
        candidates = self.get_safe_alternatives(top100, [])[:3]
        return random.choice(candidates)

    # --- NH√ìM 5: S√ÅNG T·∫†O & HEURISTICS ---
    def logic_41_quantum_superposition_collapse(self, top10, top100):
        """41. S·ª•p ƒë·ªï l∆∞·ª£ng t·ª≠: Coi t·∫•t c·∫£ NV y·∫øu l√† m·ªôt 'tr·∫°ng th√°i ch·ªìng ch·∫≠p' v√† ch·ªçn ng·∫´u nhi√™n m·ªôt."""
        return self.logic_40_systematic_desensitization(top10, top100)

    def logic_42_swarm_intelligence_divergence(self, top10, top100):
        """42. Ph√¢n k·ª≥ b·∫ßy ƒë√†n: N·∫øu nhi·ªÅu NV ƒëang 't·ª• l·∫°i' ·ªü m·ªôt m·ª©c th·∫Øng, ch·ªçn m·ªôt con ·ªü ngo√†i 'b·∫ßy'."""
        wins = sorted(top100[1])
        gaps = [wins[i+1] - wins[i] for i in range(len(wins)-1)]
        if not gaps: return random.randint(1,6)
        max_gap_index = gaps.index(max(gaps))
        # Ch·ªçn con n·∫±m ·ªü ph√≠a √≠t ƒë√¥ng ƒë√∫c h∆°n c·ªßa kho·∫£ng tr·ªëng l·ªõn nh·∫•t
        if max_gap_index > len(wins) / 2:
            return top100[1].index(wins[-1]) + 1 # Con m·∫°nh nh·∫•t
        else:
            return top100[1].index(wins[0]) + 1 # Con y·∫øu nh·∫•t

    def logic_43_knight_tour_heuristic(self, top10, top100):
        """43. Heuristic M√£ ƒëi tu·∫ßn: Coi NV l√† b√†n c·ªù 2x3, di chuy·ªÉn nh∆∞ qu√¢n m√£ t·ª´ v·ªã tr√≠ th·∫Øng cu·ªëi."""
        board = {1:(0,0), 2:(0,1), 3:(0,2), 4:(1,0), 5:(1,1), 6:(1,2)}
        rev_board = {(0,0):1, (0,1):2, (0,2):3, (1,0):4, (1,1):5, (1,2):6}
        last_pos = board[top10[1][0]]
        moves = [(1,2), (1,-2), (-1,2), (-1,-2), (2,1), (2,-1), (-2,1), (-2,-1)]
        valid_moves = []
        for move in moves:
            new_pos = (last_pos[0] + move[0], last_pos[1] + move[1])
            if new_pos in rev_board:
                valid_moves.append(rev_board[new_pos])
        if not valid_moves: return self.get_safe_alternatives(top100, [top10[1][0]])[0]
        # Tr√°nh m·ªôt trong c√°c n∆∞·ªõc ƒëi h·ª£p l·ªá
        return self.get_safe_alternatives(top100, valid_moves)[0]

    def logic_44_golden_ratio_bias(self, top10, top100):
        """44. Thi√™n v·ªã T·ª∑ l·ªá v√†ng: Ch·ªçn NV c√≥ t·ª∑ l·ªá th·∫Øng g·∫ßn nh·∫•t v·ªõi 1/phi (phi ~ 1.618)."""
        phi = 1.618
        target_ratio = 1/phi
        total_wins = sum(top100[1])
        if total_wins == 0: return random.randint(1,6)
        ratios = {i+1: top100[1][i] / total_wins for i in range(6)}
        closest = min(ratios, key=lambda c: abs(ratios[c] - target_ratio))
        return closest

    def logic_45_fractal_dimension_break(self, top10, top100):
        """45. Ph√° v·ª° chi·ªÅu Fractal: N·∫øu chu·ªói k·∫øt qu·∫£ c√≥ t√≠nh l·∫∑p l·∫°i ·ªü c√°c quy m√¥ kh√°c nhau, ph√° v·ª° n√≥."""
        h5 = top10[1][:5]
        h10 = top10[1][:10]
        if len(h5) < 5 or len(h10) < 10: return random.randint(1,6)
        dist5 = Counter(h5)
        dist10 = Counter(h10)
        is_fractal = True
        for char in range(1,7):
            if dist10.get(char,0) > 0 and abs(dist5.get(char,0)*2 - dist10.get(char,0)) > 2:
                is_fractal = False
                break
        if is_fractal: # N·∫øu c√≥ t√≠nh fractal, tr√°nh con ph·ªï bi·∫øn nh·∫•t
            return dist10.most_common(1)[0][0]
        return self.logic_1_z_score_outlier(top10, top100)
    
    def logic_46_information_gap_fill(self, top10, top100):
        """46. L·∫•p ƒë·∫ßy kho·∫£ng tr·ªëng th√¥ng tin: Ch·ªçn NV kh√¥ng th·∫Øng trong 10 v√°n g·∫ßn nh·∫•t."""
        winners10 = set(top10[1])
        candidates = list(set(range(1, 7)) - winners10)
        if candidates:
            return random.choice(candidates)
        return sorted(Counter(top10[1]).items(), key=lambda x:x[1])[0][0]

    def logic_47_weighted_recency_drought(self, top10, top100):
        """47. ƒê·ªô tr·ªÖ gia quy·ªÅn: T√≠nh ƒëi·ªÉm 'tr·ªÖ' b·∫±ng c√°ch c·ªông c√°c v·ªã tr√≠ kh√¥ng th·∫Øng, ch·ªçn con c√≥ ƒëi·ªÉm cao nh·∫•t."""
        scores = {c: 0 for c in range(1, 7)}
        for i, winner in enumerate(reversed(top10[1])):
            for c in range(1, 7):
                if c != winner:
                    scores[c] += (10 - i) # V·ªã tr√≠ c√†ng g·∫ßn ƒë√¢y, ƒëi·ªÉm c·ªông c√†ng cao
        return max(scores, key=scores.get)

    def logic_48_relative_strength_index(self, top10, top100):
        """48. Ch·ªâ s·ªë s·ª©c m·∫°nh t∆∞∆°ng ƒë·ªëi (RSI): So s√°nh 's·ª©c m·∫°nh' c·ªßa NV trong 10 v√°n so v·ªõi 100 v√°n."""
        strength100 = {i+1: top100[1][i] / 100 for i in range(6)}
        strength10 = {i+1: top10[1].count(i+1) / 10 for i in range(6)}
        rsi = {c: strength10.get(c,0) / strength100.get(c,0.01) for c in range(1, 7)}
        # Tr√°nh con ƒëang 'qu√° mua' (RSI cao)
        overbought = max(rsi, key=rsi.get)
        return self.get_safe_alternatives(top100, [overbought])[0]

    def logic_49_perfect_information_fallacy(self, top10, top100):
        """49. Ng·ª•y bi·ªán th√¥ng tin ho√†n h·∫£o: H√†nh ƒë·ªông nh∆∞ th·ªÉ th√¥ng tin trong 10 v√°n l√† 'ho√†n h·∫£o' v√† ch·ªçn con duy nh·∫•t ch∆∞a xu·∫•t hi·ªán."""
        return self.logic_46_information_gap_fill(top10, top100)

    def logic_50_occam_razor_choice(self, top10, top100):
        """50. L·ª±a ch·ªçn Dao c·∫°o Occam: Gi·∫£i ph√°p ƒë∆°n gi·∫£n nh·∫•t l√† t·ªët nh·∫•t. Tr√°nh ng∆∞·ªùi th·∫Øng cu·ªëi c√πng."""
        last_winner = top10[1][0]
        return self.get_safe_alternatives(top100, [last_winner])[0]
        
    def analyze_and_select(self, top10_data, top100_data, user_id, ma_ki):
        try:
            selected, logic_name = self.check_anti_patterns(top10_data, top100_data)
            if selected:
                self.selection_history.append(selected)
                return selected, logic_name

            logic_function = self.select_logic_deterministically(user_id, ma_ki)
            selected = logic_function(top10_data, top100_data)
            
            if not isinstance(selected, int) or not (1 <= selected <= 6):
                selected = random.randint(1, 6)
            
            logic_name = logic_function.__doc__.strip() if logic_function.__doc__ else f"üß† LOGIC_{self.current_logic_index + 1}"
            
            self.selection_history.append(selected)
            return selected, logic_name
        
        except Exception as e:
            # prints(255, 0, 0, f'‚ùå L·ªói AI: {e}') # Optional: to avoid screen clutter
            fallback = random.randint(1, 6)
            self.selection_history.append(fallback)
            return fallback, "üö® CH·∫æ ƒê·ªò D·ª∞ PH√íNG"

smart_ai = SmartAI()

def clear_screen():
    os.system('cls' if platform.system() == "Windows" else 'clear')

def prints(r, g, b, text="text", end="\n"):
    print("\033[38;2;{};{};{}m{}\033[0m".format(r, g, b, text), end=end)

def banner(game):
    banner_txt = """
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó
‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù
   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù 
   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó 
   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó
   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù  
    """
    for i in banner_txt.split('\n'):
        x, y, z = 200, 255, 255
        for j in range(len(i)):
            prints(x, y, z, i[j], end='')
            x -= 4
            time.sleep(0.001)
        print()
    prints(247, 255, 97, "‚ú®" + "‚ïê" * 45 + "‚ú®")
    prints(32, 230, 151, "üåü XWORLD AI - {} v11.0üåü".format(game).center(47))
    prints(247, 255, 97, "‚ïê" * 47)
    prints(255, 215, 0, "üß† 50 LOGIC N√ÇNG CAO & DUY NH·∫§T üß†".center(47))
    prints(255, 100, 100, "üõ°Ô∏è META-GAMING & L√ù THUY·∫æT TR√í CH∆†I üõ°Ô∏è".center(47))
    prints(100, 255, 100, "üéØ CH·ªêNG B·∫ÆT B√ÄI & PH√ÇN T√çCH S√ÇU üéØ".center(47))
    prints(247, 255, 97, "‚ïê" * 47)
    prints(7, 205, 240, "üì± Telegram: tankeko12")
    prints(7, 205, 240, "üë• Nh√≥m Zalo: https://zalo.me/g/viiuml595")
    prints(7, 205, 240, "üë®‚Äçüíº Admin: Duong Phung | Zalo: 0865656488")
    prints(247, 255, 97, "‚ïê" * 47)

def load_data_cdtd():
    if os.path.exists('data-xw-cdtd.txt'):
        prints(0, 255, 243, 'B·∫°n c√≥ mu·ªën s·ª≠ d·ª•ng th√¥ng tin ƒë√£ l∆∞u hay kh√¥ng? (y/n): ', end='')
        x = input()
        if x.lower() == 'y':
            with open('data-xw-cdtd.txt', 'r', encoding='utf-8') as f:
                return json.load(f)
        prints(247, 255, 97, "‚ïê" * 47)
    guide = """
    Hu∆∞·ªõng d·∫´n l·∫•y link:
    1.Truy c·∫≠p v√†o trang web xworld.io
    2.ƒêƒÉng nh·∫≠p t·∫£i kho·∫£n c·ªßa b·∫°n
    3.T√¨m v√† nh·∫•n v√†o ch·∫°y ƒëua t·ªëc ƒë·ªô
    4. Nh·∫•n l·∫≠p t·ª©c truy c·∫≠p
    5.Copy link trang web ƒë√≥ v√† d√°n v√†o ƒë√¢y
"""
    prints(218, 255, 125, guide)
    prints(247, 255, 97, "‚ïê" * 47)
    prints(125, 255, 168, 'üìãNh·∫≠p link c·ªßa b·∫°n:', end=' ')
    link = input()
    try:
        user_id = link.split('&')[0].split('?userId=')[1]
        user_secretkey = link.split('&')[1].split('secretKey=')[1]
    except IndexError:
        prints(255, 0, 0, "Link kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i!")
        return load_data_cdtd()
        
    prints(218, 255, 125, '    User id c·ªßa b·∫°n l√† {}'.format(user_id))
    prints(218, 255, 125, '    User secret key c·ªßa b·∫°n l√† {}'.format(user_secretkey))
    json_data = {
        'user-id': user_id,
        'user-secret-key': user_secretkey,
    }
    with open('data-xw-cdtd.txt', 'w+', encoding='utf-8') as f:
        json.dump(json_data, f, indent=4, ensure_ascii=False)
    return json_data

def top_100_cdtd(s):
    headers = {
        'accept': '*/*', 'accept-language': 'vi,en;q=0.9', 'origin': 'https://sprintrun.win',
        'priority': 'u=1, i', 'referer': 'https://sprintrun.win/', 'user-agent': 'Mozilla/5.0',
    }
    try:
        response = s.get('https://api.sprintrun.win/sprint/recent_100_issues', headers=headers, timeout=10).json()
        nv = [1, 2, 3, 4, 5, 6]
        kq = [response['data']['athlete_2_win_times'][str(i)] for i in range(1, 7)]
        return nv, kq
    except Exception as e:
        prints(255, 0, 0, f'L·ªói khi l·∫•y top 100: {e}, th·ª≠ l·∫°i...')
        time.sleep(2)
        return top_100_cdtd(s)

def top_10_cdtd(s, headers):
    try:
        response = s.get('https://api.sprintrun.win/sprint/recent_10_issues', headers=headers, timeout=10).json()
        ki, kq = [], []
        for i in response['data']['recent_10']:
            ki.append(i['issue_id'])
            kq.append(i['result'][0])
        return ki, kq
    except Exception as e:
        prints(255, 0, 0, f'L·ªói khi l·∫•y top 10: {e}, th·ª≠ l·∫°i...')
        time.sleep(2)
        return top_10_cdtd(s, headers)

def print_data(data_top10_cdtd, data_top100_cdtd):
    prints(247, 255, 97, "‚ïê" * 47)
    prints(0, 255, 250, "üìä D·ªÆ LI·ªÜU 10 V√ÅN G·∫¶N NH·∫§T:".center(50))
    for i in range(len(data_top10_cdtd[0])):
        prints(255, 255, 0, f'üèÅ K√¨ {data_top10_cdtd[0][i]}: {NV[int(data_top10_cdtd[1][i])]}')
    prints(247, 255, 97, "‚ïê" * 47)
    prints(0, 255, 250, "üìà D·ªÆ LI·ªÜU 100 V√ÅN G·∫¶N NH·∫§T:".center(50))
    for i in range(6):
        prints(255, 255, 0, f'üèÜ {NV[int(i+1)]} v·ªÅ nh·∫•t {data_top100_cdtd[1][int(i)]} l·∫ßn')
    prints(247, 255, 97, "‚ïê" * 47)

def selected_NV(data_top10_cdtd, data_top100_cdtd, htr, heso, bet_amount0, user_id, ma_ki):
    bet_amount = bet_amount0
    if len(htr) >= 1 and not htr[-1]['kq']:
        bet_amount = heso * htr[-1]['bet_amount']
    
    selected_char, logic_name = smart_ai.analyze_and_select(data_top10_cdtd, data_top100_cdtd, user_id, ma_ki)
    
    prints(0, 255, 200, f'‚ö° {logic_name}')
    return selected_char, bet_amount

def kiem_tra_kq_cdtd(s, headers, kq_dat_cuoc, ki):
    start_time = time.time()
    if kq_dat_cuoc:
        prints(0, 255, 37, f'‚è∞ ƒê√£ c∆∞·ª£c TR√ÅNH {NV[kq_dat_cuoc]}, ƒëang ƒë·ª£i k·∫øt qu·∫£ k√¨ #{ki}...')
    else:
        prints(0, 255, 37, f'‚è∞ V√°n ngh·ªâ, ƒëang ƒë·ª£i k·∫øt qu·∫£ k√¨ #{ki}...')

    while True:
        if time.time() - start_time > 90:
            prints(255, 100, 0, f"\nL·ªñI: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ cho k√¨ #{ki} sau 90 gi√¢y. C√≥ th·ªÉ do l·ªói m·∫°ng ho·∫∑c API.")
            return None

        try:
            data_top10_moi = top_10_cdtd(s, headers)
            
            if int(data_top10_moi[0][0]) == int(ki):
                ket_qua_thuc_te = int(data_top10_moi[1][0])
                
                prints(0, 255, 30, f'\nüèÜ K·∫æT QU·∫¢ K√å {ki} L√Ä: {NV[ket_qua_thuc_te]}')
                
                if kq_dat_cuoc:
                    smart_ai.add_result(kq_dat_cuoc, ket_qua_thuc_te)
                    if ket_qua_thuc_te != kq_dat_cuoc:
                        prints(0, 255, 37, f'üéâ B·∫†N ƒê√É TH·∫ÆNG! (V√¨ k·∫øt qu·∫£ l√† {NV[ket_qua_thuc_te]}, kh√¥ng ph·∫£i {NV[kq_dat_cuoc]})')
                        return True
                    else:
                        prints(255, 0, 0, f'üòî B·∫†N ƒê√É THUA. (V√¨ k·∫øt qu·∫£ TR√ôNG v·ªõi nh√¢n v·∫≠t ƒë√£ c∆∞·ª£c tr√°nh l√† {NV[kq_dat_cuoc]})')
                        return False
                else:
                    return "PAUSED"
            
            elapsed = time.time() - start_time
            prints(0, 255, 197, f'‚è≥ V·∫´n ƒëang ƒë·ª£i k·∫øt qu·∫£ k√¨ #{ki}... {int(elapsed)}s', end='\r')
            time.sleep(2)

        except Exception as e:
            prints(255, 0, 0, f"\nL·ªói trong l√∫c ch·ªù k·∫øt qu·∫£: {e}. Th·ª≠ l·∫°i sau 5 gi√¢y...")
            time.sleep(5)

def user_asset(s, headers):
    try:
        json_data = {'user_id': int(headers['user-id']),'source': 'home'}
        response = s.post('https://wallet.3games.io/api/wallet/user_asset', headers=headers, json=json_data, timeout=10)
        
        if response.status_code != 200: return {'USDT': 0.0, 'WORLD': 0.0, 'BUILD': 0.0}
        data = response.json().get('data', {}).get('user_asset', {})
        return {
            'USDT': float(data.get('USDT', 0)),
            'WORLD': float(data.get('WORLD', 0)),
            'BUILD': float(data.get('BUILD', 0))
        }
    except Exception as e:
        prints(255, 0, 0, f'L·ªói khi l·∫•y s·ªë d∆∞: {e}')
        return {'USDT': 0.0, 'WORLD': 0.0, 'BUILD': 0.0}

def print_stats_cdtd(stats, s, headers, Coin):
    try:
        asset = user_asset(s, headers)
        prints(70, 240, 234, 'üìä Th·ªëng k√™ phi√™n:')
        win_rate = stats["win"] / (stats["win"] + stats["lose"]) * 100 if (stats["win"] + stats["lose"]) > 0 else 0
        prints(50, 237, 65, f'üéØ T·ª∑ l·ªá th·∫Øng: {stats["win"]}/{stats["win"]+stats["lose"]} ({win_rate:.1f}%)')
        prints(50, 237, 65, f'üî• Chu·ªói th·∫Øng: {stats["streak"]} (Max: {stats["max_streak"]})')
        loi = asset.get(Coin, 0) - stats['asset_0']
        color = (0, 255, 20) if loi >= 0 else (255, 100, 100)
        symbol = "üìà" if loi >= 0 else "üìâ"
        prints(*color, f"{symbol} L·ª£i nhu·∫≠n: {loi:+.2f} {Coin}")
        
        best_logic = max(smart_ai.logic_performance.items(), key=lambda x: x[1]['win_rate'] if x[1]['total'] > 3 else -1)
        if best_logic[1]['total'] > 3:
            prints(150, 255, 150, f'üß† Logic t·ªët nh·∫•t: #{best_logic[0]+1} ({best_logic[1]["win_rate"]:.1%})')
    except Exception as e:
        prints(255, 0, 0, f'‚ùå L·ªói th·ªëng k√™: {e}')

def print_wallet(asset):
    prints(23, 232, 159, f'üí∞ USDT: {asset.get("USDT", 0):.2f} | üåç WORLD: {asset.get("WORLD", 0):.2f} | üèóÔ∏è BUILD: {asset.get("BUILD", 0):.2f}'.center(60))

def bet_cdtd(s, headers, ki, kq, Coin, bet_amount):
    prints(255, 255, 0, f'üí∏ ƒêang ƒë·∫∑t {bet_amount:.2f} {Coin} cho k√¨ #{ki}...')
    try:
        json_data = {
            'issue_id': int(ki), 'bet_group': 'not_winner', 'asset_type': Coin,
            'athlete_id': int(kq), 'bet_amount': float(bet_amount),
        }
        response = s.post('https://api.sprintrun.win/sprint/bet', headers=headers, json=json_data, timeout=15)
        
        if response.status_code != 200:
            prints(255, 100, 0, f'‚ö†Ô∏è L·ªói HTTP: {response.status_code} - {response.text[:100]}')
            return
        
        response_json = response.json()
        if response_json.get('code') == 0 and response_json.get('msg') == 'ok':
            prints(0, 255, 19, f'‚úÖ ƒê·∫∑t c∆∞·ª£c th√†nh c√¥ng: {bet_amount:.2f} {Coin} ‚Üí Tr√°nh {NV[int(kq)]}')
        else:
            prints(255, 100, 0, f'‚ö†Ô∏è L·ªói API: {response_json.get("msg", "Kh√¥ng r√µ l·ªói")}')
    except Exception as e:
        prints(255, 0, 0, f'‚ùå L·ªói khi ƒë·∫∑t c∆∞·ª£c: {e}')

def main_cdtd():
    s = requests.Session()
    banner("CH·∫†Y ƒêUA T·ªêC ƒê·ªò")
    data = load_data_cdtd()
    headers = {
        'accept': '*/*', 'accept-language': 'vi,en;q=0.9', 'cache-control': 'no-cache',
        'country-code': 'vn', 'origin': 'https://xworld.info', 'pragma': 'no-cache',
        'priority': 'u=1, i', 'referer': 'https://xworld.info/', 'user-agent': 'Mozilla/5.0',
        'user-id': data['user-id'], 'user-login': 'login_v2',
        'user-secret-key': data['user-secret-key'], 'xb-language': 'vi-VN',
    }
    
    asset = user_asset(s, headers)
    print_wallet(asset)
    
    choice_txt = "    üí∞ Ch·ªçn lo·∫°i ti·ªÅn mu·ªën ch∆°i:\n        1Ô∏è‚É£ USDT\n        2Ô∏è‚É£ BUILD\n        3Ô∏è‚É£ WORLD"
    prints(219, 237, 138, choice_txt)
    coin_map = {'1': 'USDT', '2': 'BUILD', '3': 'WORLD'}
    while True:
        prints(125, 255, 168, 'Nh·∫≠p lo·∫°i ti·ªÅn b·∫°n mu·ªën ch∆°i (1/2/3):', end=' ')
        x = input()
        if x in coin_map:
            Coin = coin_map[x]
            break
        prints(247, 30, 30, 'Nh·∫≠p sai, vui l√≤ng nh·∫≠p l·∫°i ...', end='\r')
        
    bet_amount0 = float(input(f'Nh·∫≠p s·ªë {Coin} mu·ªën ƒë·∫∑t: '))
    heso = float(input('Nh·∫≠p h·ªá s·ªë c∆∞·ª£c sau thua: '))
    delay1 = int(input('Sau bao nhi√™u v√°n th√¨ t·∫°m ngh·ªâ (Nh·∫≠p 999 n·∫øu kh√¥ng mu·ªën): '))
    delay2 = int(input(f'Sau {delay1} v√°n th√¨ t·∫°m ngh·ªâ bao nhi√™u v√°n (Nh·∫≠p 0 n·∫øu kh√¥ng ngh·ªâ): '))
    
    stats = {'win': 0, 'lose': 0, 'streak': 0, 'max_streak': 0, 'asset_0': asset.get(Coin, 0)}
    htr = []
    tong = 0

    while True:
        try:
            clear_screen()
            banner('CH·∫†Y ƒêUA T·ªêC ƒê·ªò')
            print_wallet(user_asset(s, headers))
            print_stats_cdtd(stats, s, headers, Coin)
            prints(247, 255, 97, "‚ïê" * 47)

            # L·∫•y d·ªØ li·ªáu top 10 v√† 100 m·ªõi nh·∫•t
            data_top10_cdtd = top_10_cdtd(s, headers)
            data_top100_cdtd = top_100_cdtd(s)
            
            # X√°c ƒë·ªãnh k√¨ s·∫Ω ƒë·∫∑t c∆∞·ª£c l√† k√¨ ti·∫øp theo m·ªôt c√°ch ƒë∆°n gi·∫£n
            ki_dat_cuoc = data_top10_cdtd[0][0] + 1
            tong += 1

            # AI ph√¢n t√≠ch v√† ch·ªçn nh√¢n v·∫≠t
            kq, bet_amount = selected_NV(data_top10_cdtd, data_top100_cdtd, htr, heso, bet_amount0, data['user-id'], ki_dat_cuoc)
            
            # Logic t·∫°m ngh·ªâ
            cycle = delay1 + delay2
            pos = (tong - 1) % cycle if cycle > 0 else 0
            is_paused = pos >= delay1 and delay2 > 0

            if not is_paused:
                prints(0, 246, 255, f'ü§ñ AI ch·ªçn c∆∞·ª£c TR√ÅNH cho k√¨ #{ki_dat_cuoc}: {NV[int(kq)]}')
                bet_cdtd(s, headers, ki_dat_cuoc, kq, Coin, bet_amount)
            else:
                prints(255, 255, 0, f'V√°n n√†y t·∫°m ngh·ªâ ({pos - delay1 + 1}/{delay2})')
                bet_amount = bet_amount0
                kq = None # ƒê·∫∑t kq l√† None ƒë·ªÉ h√†m kiem_tra_kq bi·∫øt ƒë√¢y l√† v√°n ngh·ªâ

            # Ch·ªù ƒë·ª£i v√† ki·ªÉm tra k·∫øt qu·∫£ c·ªßa k√¨ ƒë√£ ƒë·∫∑t c∆∞·ª£c
            result = kiem_tra_kq_cdtd(s, headers, kq, ki_dat_cuoc)

            # C·∫≠p nh·∫≠t th·ªëng k√™ d·ª±a tr√™n k·∫øt qu·∫£
            if result is True:
                stats['win'] += 1
                stats['streak'] += 1
                stats['max_streak'] = max(stats['max_streak'], stats['streak'])
                htr.append({'kq': True, 'bet_amount': bet_amount})
            elif result is False:
                stats['streak'] = 0
                stats['lose'] += 1
                htr.append({'kq': False, 'bet_amount': bet_amount})
            elif result is None:
                prints(255, 255, 0, "‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c k·∫øt qu·∫£, b·ªè qua v√°n c∆∞·ª£c.")

            prints(247, 255, 97, "--- Chuy·ªÉn sang v√°n m·ªõi sau 20 gi√¢y ---")
            time.sleep(20)

        except Exception as e:
            prints(255, 0, 0, f'L·ªói trong v√≤ng l·∫∑p ch√≠nh: {e}. Th·ª≠ l·∫°i sau 10 gi√¢y...')
            time.sleep(10)

if __name__ == "__main__":
    try:
        main_cdtd()
    except KeyboardInterrupt:
        prints(255, 100, 100, "\nCh∆∞∆°ng tr√¨nh ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng.")
    except Exception as e:
        prints(255, 0, 0, f"\nƒê√£ x·∫£y ra l·ªói nghi√™m tr·ªçng: {e}")
